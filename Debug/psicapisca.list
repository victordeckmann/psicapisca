
psicapisca.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000564  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006ec  080006ec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080006ec  080006ec  000106ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080006f0  080006f0  000106f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080006f4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000024  20000024  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00000d46  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000002b7  00000000  00000000  00020d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000d8  00000000  00000000  00021038  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00021110  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000006aa  00000000  00000000  000211b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000557  00000000  00000000  0002185a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00021db1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000001e0  00000000  00000000  00021e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00022010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080006d4 	.word	0x080006d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080006d4 	.word	0x080006d4

080001c8 <main>:
/* Private function prototypes */
/* Private functions */


int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	// Inicializando clock GPIO C
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80001cc:	4a9d      	ldr	r2, [pc, #628]	; (8000444 <main+0x27c>)
 80001ce:	4b9d      	ldr	r3, [pc, #628]	; (8000444 <main+0x27c>)
 80001d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d2:	f043 0304 	orr.w	r3, r3, #4
 80001d6:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 80001d8:	4a9a      	ldr	r2, [pc, #616]	; (8000444 <main+0x27c>)
 80001da:	4b9a      	ldr	r3, [pc, #616]	; (8000444 <main+0x27c>)
 80001dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e2:	6453      	str	r3, [r2, #68]	; 0x44
		RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 80001e4:	4a97      	ldr	r2, [pc, #604]	; (8000444 <main+0x27c>)
 80001e6:	4b97      	ldr	r3, [pc, #604]	; (8000444 <main+0x27c>)
 80001e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80001ee:	6453      	str	r3, [r2, #68]	; 0x44

		// Saidas
		GPIOC->MODER &= ~(GPIO_MODER_MODER0 |
 80001f0:	4a95      	ldr	r2, [pc, #596]	; (8000448 <main+0x280>)
 80001f2:	4b95      	ldr	r3, [pc, #596]	; (8000448 <main+0x280>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f023 030f 	bic.w	r3, r3, #15
 80001fa:	6013      	str	r3, [r2, #0]
						GPIO_MODER_MODER1);
		GPIOC->MODER |= (GPIO_MODER_MODER0_0 |
 80001fc:	4a92      	ldr	r2, [pc, #584]	; (8000448 <main+0x280>)
 80001fe:	4b92      	ldr	r3, [pc, #584]	; (8000448 <main+0x280>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f043 0305 	orr.w	r3, r3, #5
 8000206:	6013      	str	r3, [r2, #0]
						GPIO_MODER_MODER1_0);

		// Teoricamente 132 e 1999 fazem 120Hz Para piscar rapido e fazer mux
		//(16Mhz / 120 hz)/ (1999 + 1) = 132 + 1
		TIM10->PSC = 132;
 8000208:	4b90      	ldr	r3, [pc, #576]	; (800044c <main+0x284>)
 800020a:	2284      	movs	r2, #132	; 0x84
 800020c:	851a      	strh	r2, [r3, #40]	; 0x28
		TIM10->ARR = 1999;
 800020e:	4b8f      	ldr	r3, [pc, #572]	; (800044c <main+0x284>)
 8000210:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000214:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM10->CR1 = TIM_CR1_CEN;
 8000216:	4b8d      	ldr	r3, [pc, #564]	; (800044c <main+0x284>)
 8000218:	2201      	movs	r2, #1
 800021a:	801a      	strh	r2, [r3, #0]

		// Teoricamente 499 e 1999 fazem 16Hz
		//(16Mhz / 16 hz)/ (1999 + 1) = 499 + 1
		TIM11->PSC = 499;
 800021c:	4b8c      	ldr	r3, [pc, #560]	; (8000450 <main+0x288>)
 800021e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000222:	851a      	strh	r2, [r3, #40]	; 0x28
		TIM11->ARR = 1999;
 8000224:	4b8a      	ldr	r3, [pc, #552]	; (8000450 <main+0x288>)
 8000226:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800022a:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM11->CR1 = TIM_CR1_CEN;
 800022c:	4b88      	ldr	r3, [pc, #544]	; (8000450 <main+0x288>)
 800022e:	2201      	movs	r2, #1
 8000230:	801a      	strh	r2, [r3, #0]


  while (1)
  {
	  if(TIM10->SR & TIM_SR_UIF){// confere se a flag do timer é '1', "terminou o periodo"
 8000232:	4b86      	ldr	r3, [pc, #536]	; (800044c <main+0x284>)
 8000234:	8a1b      	ldrh	r3, [r3, #16]
 8000236:	b29b      	uxth	r3, r3
 8000238:	f003 0301 	and.w	r3, r3, #1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d05b      	beq.n	80002f8 <main+0x130>
		  TIM10->SR &= ~TIM_SR_UIF;// "zera" a flag permitindo que o timer conte novamente
 8000240:	4a82      	ldr	r2, [pc, #520]	; (800044c <main+0x284>)
 8000242:	4b82      	ldr	r3, [pc, #520]	; (800044c <main+0x284>)
 8000244:	8a1b      	ldrh	r3, [r3, #16]
 8000246:	b29b      	uxth	r3, r3
 8000248:	f023 0301 	bic.w	r3, r3, #1
 800024c:	b29b      	uxth	r3, r3
 800024e:	8213      	strh	r3, [r2, #16]
		  if(pares == 1){
 8000250:	4b80      	ldr	r3, [pc, #512]	; (8000454 <main+0x28c>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b01      	cmp	r3, #1
 8000256:	d11f      	bne.n	8000298 <main+0xd0>
			  if (!((GPIOC -> ODR & PINO1) && ((GPIOC -> ODR & PINO0) == 0))){//se o pino1 está ligado e o pino0 desligado, n entra no if
 8000258:	4b7b      	ldr	r3, [pc, #492]	; (8000448 <main+0x280>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	f003 0302 	and.w	r3, r3, #2
 8000260:	2b00      	cmp	r3, #0
 8000262:	d005      	beq.n	8000270 <main+0xa8>
 8000264:	4b78      	ldr	r3, [pc, #480]	; (8000448 <main+0x280>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d019      	beq.n	80002a4 <main+0xdc>
				  if(GPIOC -> ODR & PINO0 ){
 8000270:	4b75      	ldr	r3, [pc, #468]	; (8000448 <main+0x280>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	f003 0301 	and.w	r3, r3, #1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d006      	beq.n	800028a <main+0xc2>
					  GPIOC -> ODR &= ~PINO0;
 800027c:	4a72      	ldr	r2, [pc, #456]	; (8000448 <main+0x280>)
 800027e:	4b72      	ldr	r3, [pc, #456]	; (8000448 <main+0x280>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	f023 0301 	bic.w	r3, r3, #1
 8000286:	6153      	str	r3, [r2, #20]
 8000288:	e00c      	b.n	80002a4 <main+0xdc>
				  }else{
					  GPIOC -> ODR |= PINO0;
 800028a:	4a6f      	ldr	r2, [pc, #444]	; (8000448 <main+0x280>)
 800028c:	4b6e      	ldr	r3, [pc, #440]	; (8000448 <main+0x280>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6153      	str	r3, [r2, #20]
 8000296:	e005      	b.n	80002a4 <main+0xdc>
				  }
				}
		  }else{
			  GPIOC -> ODR &= ~PINO0;//garante que o pino esteja desligado para a troca de estados
 8000298:	4a6b      	ldr	r2, [pc, #428]	; (8000448 <main+0x280>)
 800029a:	4b6b      	ldr	r3, [pc, #428]	; (8000448 <main+0x280>)
 800029c:	695b      	ldr	r3, [r3, #20]
 800029e:	f023 0301 	bic.w	r3, r3, #1
 80002a2:	6153      	str	r3, [r2, #20]
		  }
		  if(impares == 1){
 80002a4:	4b6c      	ldr	r3, [pc, #432]	; (8000458 <main+0x290>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d11f      	bne.n	80002ec <main+0x124>
			  if (!((GPIOC -> ODR & PINO0) && ((GPIOC -> ODR & PINO1) == 0))){//se o pino0 está ligado e o pino1 desligado, n entra no if
 80002ac:	4b66      	ldr	r3, [pc, #408]	; (8000448 <main+0x280>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	f003 0301 	and.w	r3, r3, #1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d005      	beq.n	80002c4 <main+0xfc>
 80002b8:	4b63      	ldr	r3, [pc, #396]	; (8000448 <main+0x280>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	f003 0302 	and.w	r3, r3, #2
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d019      	beq.n	80002f8 <main+0x130>
				  if(GPIOC -> ODR & PINO1 ){
 80002c4:	4b60      	ldr	r3, [pc, #384]	; (8000448 <main+0x280>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	f003 0302 	and.w	r3, r3, #2
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d006      	beq.n	80002de <main+0x116>
					  GPIOC -> ODR &= ~PINO1;
 80002d0:	4a5d      	ldr	r2, [pc, #372]	; (8000448 <main+0x280>)
 80002d2:	4b5d      	ldr	r3, [pc, #372]	; (8000448 <main+0x280>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f023 0302 	bic.w	r3, r3, #2
 80002da:	6153      	str	r3, [r2, #20]
 80002dc:	e00c      	b.n	80002f8 <main+0x130>
				  }else{
					  GPIOC -> ODR |= PINO1;
 80002de:	4a5a      	ldr	r2, [pc, #360]	; (8000448 <main+0x280>)
 80002e0:	4b59      	ldr	r3, [pc, #356]	; (8000448 <main+0x280>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	f043 0302 	orr.w	r3, r3, #2
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	e005      	b.n	80002f8 <main+0x130>
				  }
			  }
		  }else{
			  GPIOC -> ODR &= ~PINO1;//garante que o pino esteja desligado para a troca de estados
 80002ec:	4a56      	ldr	r2, [pc, #344]	; (8000448 <main+0x280>)
 80002ee:	4b56      	ldr	r3, [pc, #344]	; (8000448 <main+0x280>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f023 0302 	bic.w	r3, r3, #2
 80002f6:	6153      	str	r3, [r2, #20]
		  }
	  }

	  if(TIM11->SR & TIM_SR_UIF){// confere se a flag do timer é '1', "terminou o periodo"
 80002f8:	4b55      	ldr	r3, [pc, #340]	; (8000450 <main+0x288>)
 80002fa:	8a1b      	ldrh	r3, [r3, #16]
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	2b00      	cmp	r3, #0
 8000304:	d095      	beq.n	8000232 <main+0x6a>
		  TIM11->SR &= ~TIM_SR_UIF;// "zera" a flag permitindo que o timer conte novamente
 8000306:	4a52      	ldr	r2, [pc, #328]	; (8000450 <main+0x288>)
 8000308:	4b51      	ldr	r3, [pc, #324]	; (8000450 <main+0x288>)
 800030a:	8a1b      	ldrh	r3, [r3, #16]
 800030c:	b29b      	uxth	r3, r3
 800030e:	f023 0301 	bic.w	r3, r3, #1
 8000312:	b29b      	uxth	r3, r3
 8000314:	8213      	strh	r3, [r2, #16]
		  contador++;
 8000316:	4b51      	ldr	r3, [pc, #324]	; (800045c <main+0x294>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	3301      	adds	r3, #1
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4b4f      	ldr	r3, [pc, #316]	; (800045c <main+0x294>)
 8000320:	701a      	strb	r2, [r3, #0]
		  if (contador >= 16) {//quantidade = frequencia do timer11 para dar 1 segundo
 8000322:	4b4e      	ldr	r3, [pc, #312]	; (800045c <main+0x294>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b0f      	cmp	r3, #15
 8000328:	d908      	bls.n	800033c <main+0x174>
			  contador = 0;
 800032a:	4b4c      	ldr	r3, [pc, #304]	; (800045c <main+0x294>)
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
			  segundos++;
 8000330:	4b4b      	ldr	r3, [pc, #300]	; (8000460 <main+0x298>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	3301      	adds	r3, #1
 8000336:	b2da      	uxtb	r2, r3
 8000338:	4b49      	ldr	r3, [pc, #292]	; (8000460 <main+0x298>)
 800033a:	701a      	strb	r2, [r3, #0]
		  }
		  switch(estado){
 800033c:	4b49      	ldr	r3, [pc, #292]	; (8000464 <main+0x29c>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b02      	cmp	r3, #2
 8000342:	d038      	beq.n	80003b6 <main+0x1ee>
 8000344:	2b03      	cmp	r3, #3
 8000346:	d059      	beq.n	80003fc <main+0x234>
 8000348:	2b01      	cmp	r3, #1
 800034a:	d011      	beq.n	8000370 <main+0x1a8>

			  case 0:
			  default:
				  pares = 1;
 800034c:	4b41      	ldr	r3, [pc, #260]	; (8000454 <main+0x28c>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
			  	  impares= 1;
 8000352:	4b41      	ldr	r3, [pc, #260]	; (8000458 <main+0x290>)
 8000354:	2201      	movs	r2, #1
 8000356:	701a      	strb	r2, [r3, #0]
			  	  if(segundos >= TEMPO_ESTADO){
 8000358:	4b41      	ldr	r3, [pc, #260]	; (8000460 <main+0x298>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b05      	cmp	r3, #5
 800035e:	f240 8083 	bls.w	8000468 <main+0x2a0>
			  		  estado = 1;//garantir que sempre vai voltar para o primeiro estado
 8000362:	4b40      	ldr	r3, [pc, #256]	; (8000464 <main+0x29c>)
 8000364:	2201      	movs	r2, #1
 8000366:	701a      	strb	r2, [r3, #0]
			  		  segundos = 0;
 8000368:	4b3d      	ldr	r3, [pc, #244]	; (8000460 <main+0x298>)
 800036a:	2200      	movs	r2, #0
 800036c:	701a      	strb	r2, [r3, #0]
			  	  }
				  break;
 800036e:	e07b      	b.n	8000468 <main+0x2a0>

			  case 1:
				  impares = 0;
 8000370:	4b39      	ldr	r3, [pc, #228]	; (8000458 <main+0x290>)
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
				  if (contador % 2){
 8000376:	4b39      	ldr	r3, [pc, #228]	; (800045c <main+0x294>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	b2db      	uxtb	r3, r3
 8000380:	2b00      	cmp	r3, #0
 8000382:	d00a      	beq.n	800039a <main+0x1d2>
					  if(pares == 1){
 8000384:	4b33      	ldr	r3, [pc, #204]	; (8000454 <main+0x28c>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d103      	bne.n	8000394 <main+0x1cc>
						  pares = 0;
 800038c:	4b31      	ldr	r3, [pc, #196]	; (8000454 <main+0x28c>)
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]
 8000392:	e002      	b.n	800039a <main+0x1d2>
					  }else{
						  pares = 1;
 8000394:	4b2f      	ldr	r3, [pc, #188]	; (8000454 <main+0x28c>)
 8000396:	2201      	movs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
					  }
				  }
				  if(segundos >= TEMPO_ESTADO){
 800039a:	4b31      	ldr	r3, [pc, #196]	; (8000460 <main+0x298>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b05      	cmp	r3, #5
 80003a0:	d964      	bls.n	800046c <main+0x2a4>
					  estado ++;
 80003a2:	4b30      	ldr	r3, [pc, #192]	; (8000464 <main+0x29c>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	3301      	adds	r3, #1
 80003a8:	b2da      	uxtb	r2, r3
 80003aa:	4b2e      	ldr	r3, [pc, #184]	; (8000464 <main+0x29c>)
 80003ac:	701a      	strb	r2, [r3, #0]
					  segundos = 0;
 80003ae:	4b2c      	ldr	r3, [pc, #176]	; (8000460 <main+0x298>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 80003b4:	e05a      	b.n	800046c <main+0x2a4>

			  case 2:
				  pares = 0;
 80003b6:	4b27      	ldr	r3, [pc, #156]	; (8000454 <main+0x28c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
				  if (contador % 2){
 80003bc:	4b27      	ldr	r3, [pc, #156]	; (800045c <main+0x294>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	f003 0301 	and.w	r3, r3, #1
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d00a      	beq.n	80003e0 <main+0x218>
					  if(impares == 1){
 80003ca:	4b23      	ldr	r3, [pc, #140]	; (8000458 <main+0x290>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d103      	bne.n	80003da <main+0x212>
						  impares = 0;
 80003d2:	4b21      	ldr	r3, [pc, #132]	; (8000458 <main+0x290>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
 80003d8:	e002      	b.n	80003e0 <main+0x218>
					  }else{
						  impares = 1;
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <main+0x290>)
 80003dc:	2201      	movs	r2, #1
 80003de:	701a      	strb	r2, [r3, #0]
					  }
				  }
				  if(segundos >= TEMPO_ESTADO){
 80003e0:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <main+0x298>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b05      	cmp	r3, #5
 80003e6:	d943      	bls.n	8000470 <main+0x2a8>
					  estado ++;
 80003e8:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <main+0x29c>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	3301      	adds	r3, #1
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <main+0x29c>)
 80003f2:	701a      	strb	r2, [r3, #0]
					  segundos = 0;
 80003f4:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <main+0x298>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 80003fa:	e039      	b.n	8000470 <main+0x2a8>

			  case 3:
				  if (contador % 2){
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <main+0x294>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	f003 0301 	and.w	r3, r3, #1
 8000404:	b2db      	uxtb	r3, r3
 8000406:	2b00      	cmp	r3, #0
 8000408:	d00e      	beq.n	8000428 <main+0x260>
					  if(impares == 1){
 800040a:	4b13      	ldr	r3, [pc, #76]	; (8000458 <main+0x290>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d103      	bne.n	800041a <main+0x252>
						  impares = 0;
 8000412:	4b11      	ldr	r3, [pc, #68]	; (8000458 <main+0x290>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	e002      	b.n	8000420 <main+0x258>
					  }else{
						  impares = 1;
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <main+0x290>)
 800041c:	2201      	movs	r2, #1
 800041e:	701a      	strb	r2, [r3, #0]
					  }
					  pares = impares;
 8000420:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <main+0x290>)
 8000422:	781a      	ldrb	r2, [r3, #0]
 8000424:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <main+0x28c>)
 8000426:	701a      	strb	r2, [r3, #0]
				  }
				  if(segundos >= TEMPO_ESTADO){
 8000428:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <main+0x298>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b05      	cmp	r3, #5
 800042e:	d921      	bls.n	8000474 <main+0x2ac>
					  estado ++;
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <main+0x29c>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	3301      	adds	r3, #1
 8000436:	b2da      	uxtb	r2, r3
 8000438:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <main+0x29c>)
 800043a:	701a      	strb	r2, [r3, #0]
					  segundos = 0;
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <main+0x298>)
 800043e:	2200      	movs	r2, #0
 8000440:	701a      	strb	r2, [r3, #0]
				  }
				  break;
 8000442:	e017      	b.n	8000474 <main+0x2ac>
 8000444:	40023800 	.word	0x40023800
 8000448:	40020800 	.word	0x40020800
 800044c:	40014400 	.word	0x40014400
 8000450:	40014800 	.word	0x40014800
 8000454:	20000001 	.word	0x20000001
 8000458:	20000000 	.word	0x20000000
 800045c:	20000020 	.word	0x20000020
 8000460:	20000021 	.word	0x20000021
 8000464:	20000022 	.word	0x20000022
				  break;
 8000468:	bf00      	nop
 800046a:	e6e2      	b.n	8000232 <main+0x6a>
				  break;
 800046c:	bf00      	nop
 800046e:	e6e0      	b.n	8000232 <main+0x6a>
				  break;
 8000470:	bf00      	nop
 8000472:	e6de      	b.n	8000232 <main+0x6a>
				  break;
 8000474:	bf00      	nop
	  if(TIM10->SR & TIM_SR_UIF){// confere se a flag do timer é '1', "terminou o periodo"
 8000476:	e6dc      	b.n	8000232 <main+0x6a>

08000478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800047c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800047e:	e003      	b.n	8000488 <LoopCopyDataInit>

08000480 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000482:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000484:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000486:	3104      	adds	r1, #4

08000488 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000488:	480b      	ldr	r0, [pc, #44]	; (80004b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800048c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800048e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000490:	d3f6      	bcc.n	8000480 <CopyDataInit>
  ldr  r2, =_sbss
 8000492:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000494:	e002      	b.n	800049c <LoopFillZerobss>

08000496 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000496:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000498:	f842 3b04 	str.w	r3, [r2], #4

0800049c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800049e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004a0:	d3f9      	bcc.n	8000496 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004a2:	f000 f841 	bl	8000528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004a6:	f000 f8f1 	bl	800068c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004aa:	f7ff fe8d 	bl	80001c8 <main>
  bx  lr    
 80004ae:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004b0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80004b4:	080006f4 	.word	0x080006f4
  ldr  r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004bc:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80004c0:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80004c4:	20000024 	.word	0x20000024

080004c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004c8:	e7fe      	b.n	80004c8 <ADC_IRQHandler>

080004ca <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <HardFault_Handler+0x4>

080004de <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <MemManage_Handler+0x4>

080004e4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <BusFault_Handler+0x4>

080004ea <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <UsageFault_Handler+0x4>

080004f0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800052c:	4a16      	ldr	r2, [pc, #88]	; (8000588 <SystemInit+0x60>)
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <SystemInit+0x60>)
 8000530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800053c:	4a13      	ldr	r2, [pc, #76]	; (800058c <SystemInit+0x64>)
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <SystemInit+0x64>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <SystemInit+0x64>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800054e:	4a0f      	ldr	r2, [pc, #60]	; (800058c <SystemInit+0x64>)
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <SystemInit+0x64>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800055c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <SystemInit+0x64>)
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <SystemInit+0x68>)
 8000562:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000564:	4a09      	ldr	r2, [pc, #36]	; (800058c <SystemInit+0x64>)
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <SystemInit+0x64>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800056e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <SystemInit+0x64>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000576:	f000 f80d 	bl	8000594 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800057a:	4b03      	ldr	r3, [pc, #12]	; (8000588 <SystemInit+0x60>)
 800057c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000580:	609a      	str	r2, [r3, #8]
#endif
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	e000ed00 	.word	0xe000ed00
 800058c:	40023800 	.word	0x40023800
 8000590:	24003010 	.word	0x24003010

08000594 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	2300      	movs	r3, #0
 80005a0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80005a2:	4a36      	ldr	r2, [pc, #216]	; (800067c <SetSysClock+0xe8>)
 80005a4:	4b35      	ldr	r3, [pc, #212]	; (800067c <SetSysClock+0xe8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ac:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80005ae:	4b33      	ldr	r3, [pc, #204]	; (800067c <SetSysClock+0xe8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3301      	adds	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d103      	bne.n	80005cc <SetSysClock+0x38>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80005ca:	d1f0      	bne.n	80005ae <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80005cc:	4b2b      	ldr	r3, [pc, #172]	; (800067c <SetSysClock+0xe8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d002      	beq.n	80005de <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80005d8:	2301      	movs	r3, #1
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	e001      	b.n	80005e2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d142      	bne.n	800066e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80005e8:	4a24      	ldr	r2, [pc, #144]	; (800067c <SetSysClock+0xe8>)
 80005ea:	4b24      	ldr	r3, [pc, #144]	; (800067c <SetSysClock+0xe8>)
 80005ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80005f4:	4a22      	ldr	r2, [pc, #136]	; (8000680 <SetSysClock+0xec>)
 80005f6:	4b22      	ldr	r3, [pc, #136]	; (8000680 <SetSysClock+0xec>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005fe:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000600:	4a1e      	ldr	r2, [pc, #120]	; (800067c <SetSysClock+0xe8>)
 8000602:	4b1e      	ldr	r3, [pc, #120]	; (800067c <SetSysClock+0xe8>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000608:	4a1c      	ldr	r2, [pc, #112]	; (800067c <SetSysClock+0xe8>)
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <SetSysClock+0xe8>)
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000612:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000614:	4a19      	ldr	r2, [pc, #100]	; (800067c <SetSysClock+0xe8>)
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <SetSysClock+0xe8>)
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800061e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <SetSysClock+0xe8>)
 8000622:	4a18      	ldr	r2, [pc, #96]	; (8000684 <SetSysClock+0xf0>)
 8000624:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <SetSysClock+0xe8>)
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <SetSysClock+0xe8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000630:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000632:	bf00      	nop
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <SetSysClock+0xe8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0f9      	beq.n	8000634 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <SetSysClock+0xf4>)
 8000642:	f240 7205 	movw	r2, #1797	; 0x705
 8000646:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <SetSysClock+0xe8>)
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <SetSysClock+0xe8>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	f023 0303 	bic.w	r3, r3, #3
 8000652:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000654:	4a09      	ldr	r2, [pc, #36]	; (800067c <SetSysClock+0xe8>)
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <SetSysClock+0xe8>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	f043 0302 	orr.w	r3, r3, #2
 800065e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000660:	bf00      	nop
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <SetSysClock+0xe8>)
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	f003 030c 	and.w	r3, r3, #12
 800066a:	2b08      	cmp	r3, #8
 800066c:	d1f9      	bne.n	8000662 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000
 8000684:	07405419 	.word	0x07405419
 8000688:	40023c00 	.word	0x40023c00

0800068c <__libc_init_array>:
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	4e0d      	ldr	r6, [pc, #52]	; (80006c4 <__libc_init_array+0x38>)
 8000690:	4c0d      	ldr	r4, [pc, #52]	; (80006c8 <__libc_init_array+0x3c>)
 8000692:	1ba4      	subs	r4, r4, r6
 8000694:	10a4      	asrs	r4, r4, #2
 8000696:	2500      	movs	r5, #0
 8000698:	42a5      	cmp	r5, r4
 800069a:	d109      	bne.n	80006b0 <__libc_init_array+0x24>
 800069c:	4e0b      	ldr	r6, [pc, #44]	; (80006cc <__libc_init_array+0x40>)
 800069e:	4c0c      	ldr	r4, [pc, #48]	; (80006d0 <__libc_init_array+0x44>)
 80006a0:	f000 f818 	bl	80006d4 <_init>
 80006a4:	1ba4      	subs	r4, r4, r6
 80006a6:	10a4      	asrs	r4, r4, #2
 80006a8:	2500      	movs	r5, #0
 80006aa:	42a5      	cmp	r5, r4
 80006ac:	d105      	bne.n	80006ba <__libc_init_array+0x2e>
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006b4:	4798      	blx	r3
 80006b6:	3501      	adds	r5, #1
 80006b8:	e7ee      	b.n	8000698 <__libc_init_array+0xc>
 80006ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006be:	4798      	blx	r3
 80006c0:	3501      	adds	r5, #1
 80006c2:	e7f2      	b.n	80006aa <__libc_init_array+0x1e>
 80006c4:	080006ec 	.word	0x080006ec
 80006c8:	080006ec 	.word	0x080006ec
 80006cc:	080006ec 	.word	0x080006ec
 80006d0:	080006f0 	.word	0x080006f0

080006d4 <_init>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	bf00      	nop
 80006d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006da:	bc08      	pop	{r3}
 80006dc:	469e      	mov	lr, r3
 80006de:	4770      	bx	lr

080006e0 <_fini>:
 80006e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e2:	bf00      	nop
 80006e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006e6:	bc08      	pop	{r3}
 80006e8:	469e      	mov	lr, r3
 80006ea:	4770      	bx	lr
